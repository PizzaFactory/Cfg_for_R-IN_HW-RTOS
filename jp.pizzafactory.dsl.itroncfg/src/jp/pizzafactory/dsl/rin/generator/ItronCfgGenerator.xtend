/*
 * generated by Xtext
 */
package jp.pizzafactory.dsl.rin.generator

import java.util.List
import jp.pizzafactory.dsl.rin.itronCfg.CRE_FLG
import jp.pizzafactory.dsl.rin.itronCfg.CRE_MBX
import jp.pizzafactory.dsl.rin.itronCfg.CRE_MTX
import jp.pizzafactory.dsl.rin.itronCfg.CRE_SEM
import jp.pizzafactory.dsl.rin.itronCfg.CRE_TSK
import jp.pizzafactory.dsl.rin.itronCfg.DEF_INH
import jp.pizzafactory.dsl.rin.itronCfg.INCLUDE
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import jp.pizzafactory.dsl.rin.itronCfg.Expr

import static extension jp.pizzafactory.dsl.rin.generator.ExpressionSerializer.serialize
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ItronCfgGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		doGenerateIds(resource, fsa)
		doGenerateTables(resource, fsa)
	}
	
	def toString(Expr expr) {
	}

	def doGenerateTables(Resource resource, IFileSystemAccess fsa) {
		var header = "/*\n * Please do not edit. This file is auto generated.\n */\n\n#include \"kernel_id.h\"\n"

		val incList = resource.allContents.filter(typeof(INCLUDE)).map[file].toList
		for (file : incList) {
			header += "#include " + file + "\n"
		}
		header += "\n"

		val tsks = resource.allContents.filter(typeof(CRE_TSK)).toIterable
		header += "const TSK_TBL static_task_table[] = {\n"
		for (tsk : tsks) {
			header += "\t{" + tsk.id + ", {" + (#[tsk.attrs.join(' | ')] + #[tsk.exinf, tsk.func, tsk.pri, tsk.stksz, tsk.stk].map[serialize]).join(", ") + "}},\n" 
		}
		header += "\t{TASK_TBL_END, {0, 0, NULL, 0, NULL}}\n};\n\n"

		val sems = resource.allContents.filter(typeof(CRE_SEM)).toIterable
		header += "const SEM_TBL static_semaphore_table[] = {\n"
		for (sem : sems) {
			header += "\t{" + sem.id + ", {" + (#[sem.attrs.join(' | ')] + #[sem.icnt, sem.max].map[serialize]).join(", ") + "}}\n"
		}
		header += "\t{SEMAPHORE_TBL_END, {0, 0, 0}}\n};\n\n"

		val flgs = resource.allContents.filter(typeof(CRE_FLG)).toIterable
		header += "const FLG_TBL static_eventflag_table[] = {\n"
		for (flg : flgs) {
			header += "\t{" + flg.id + ", {" + (#[flg.attrs.join(" | ")] + #[flg.ptn.serialize]).join(", ") + "}},\n"
		}
		header += "\t{EVENTFLAG_TBL_END, {0, 0}}\n};\n\n"

		val mbxs = resource.allContents.filter(typeof(CRE_MBX)).toIterable
		header += "const MBX_TBL static_mailbox_table[] = {\n"
		for (mbx : mbxs) {
			header += "\t{" + mbx.id + ", {" + (#[mbx.attrs.join(" | ")] + #[mbx.maxmpri, mbx.mprihd].map[serialize]).join(", ") + "}},\n"
		}
		header += "\t{MAILBOX_TBL_END, {0, 0, NULL}}\n};\n\n"

		val mtxs = resource.allContents.filter(typeof(CRE_MTX)).toIterable
		header += "const MTX_TBL static_mutex_table[] = {\n"
		for(mtx : mtxs) {
			header += "\t{" + mtx.id + ", {" + (#[mtx.attrs.join(" | ")] + #[mtx.ceilpri.serialize]).join(", ") + "}},\n"
		}
		header += "\t{MUTEX_TBL_END, {0, 0}}\n};\n\n"

		val inhs = resource.allContents.filter(typeof(DEF_INH)).toIterable
		header += "const INT_TBL static_interrupt_table[] = {\n"
		for (inh : inhs) {
			header += "\t{" + inh.inhno + ", {" + (#[inh.attrs.join(" | ")] + #[inh.inthdr.serialize]).join(", ") + "}},\n"
		}
		header += "\t{INT_TBL_END, {0, NULL}}\n};\n"

		fsa.generateFile('kernel_cfg.c', header)
	}

	def doGenerateIds(Resource resource, IFileSystemAccess fsa) {
		var header = "/*\n * Please do not edit. This file is auto generated.\n */\n\n" +
			"#ifndef KERNEL_ID_H__\n#define KERNEL_ID_H__\n\n"
		val idsList = #[
			resource.allContents.filter(typeof(CRE_TSK)).map[id].toList,
			resource.allContents.filter(typeof(CRE_SEM)).map[id].toList,
			resource.allContents.filter(typeof(CRE_FLG)).map[id].toList,
			resource.allContents.filter(typeof(CRE_MBX)).map[id].toList,
			resource.allContents.filter(typeof(CRE_MTX)).map[id].toList]
		for (ids : idsList) {
			header += toDefines(ids)
		}
		header += "#endif /* kernel_id.h */"
		fsa.generateFile('kernel_id.h', header)
	}
	
	def toDefines(List<String> ids) {
		var header = ""
		for (i : 0 ..< ids.size) {
			header += "#define " + ids.get(i) + " (" + (i + 1) + ")\n"
		}
		header += "\n"
	}
	
}
